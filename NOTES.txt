I decided to use SwiftUI, Combine, and and Codable for this assignment.

It really highlights just how easy it is to come up with a decent looking UI without a lot of code, or a lot of tweaking Auto Layout in a custom view like UIKit.

The biggest issue with SwiftUI is that it can be incredibly easy to get things going, but even for something as simple as another view or anything more complicated, it can be hard to even know how to approach the problem, because you can't hack just start calling views or classes directly. The view is presented based on the the state of the model and is automatically updated, which makes the code very clean, and less buggy overall, if you properly build your views to depend on the model.

Codable works like magic to decode JSON, but if there's any difference in the type expected types or the way the decoder is called, it won't work. An example is an array of City is [City].self or a single Weather is Weather.self
request.responseDecodable(of: [City].self, decoder: decoder)
request.responseDecodable(of: Weather.self, decoder: decoder)

Another issue is the dates in JSON seemed to be in 2 different formats, and the ISO date decoder wouldn't work automatically. Rather than have more issues with types in Codable, I only left in the CodingKeys I needed in the ConsolidatedWeather struct.

Combine was used to publish cityName and woeid to make the CityIDFetcher and WeatherFetcher update because the @AppStorage (UserDefaults) property wrapper only updates views.

WeatherFetcher and CityIDFetcher use Alamofire to fetch the woeid and the weather for that woeid. URLSession could just as easily be used. Initially, SwiftUI would call the fetcher just by setting it as an @ObservedObject with @Published in the fetcher. But after adding the Add City function, Combine was used on UserDefaults, and the fetchers just as easily update the view with @Published/@ObservedObject.

There was some hope that the app would run on macOS without any trouble, but because macOS doesn't support navigation bar buttons, support for macOS had to be dropped. I had already added an extension for the navigationBarTitle to support macOS (no title). It seems like multiplatform ends up having hacks like this, so it is not really write once, run anywhere.

Overall, it was a good experience with the most common types of iOS app functions: JSON, List view, UserDefaults, etc. in a SwiftUI application. It would have been great to include support for Core Location, a Widget, Siri, macOS, and multiple cities at once. It could be very easy with some time for debugging to add support for these things. I noticed that it is very easy with SwiftUI and Combine to have things seem like they are updating properly, when really I needed to give a second look to the bindings/Combine.